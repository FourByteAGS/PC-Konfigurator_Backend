name: Docker Build, Test & Deploy Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Restore dependencies
        run: dotnet restore PCKonfiguratorBackend/PCKonfiguratorBackend.csproj

      - name: Build Backend
        run: dotnet build PCKonfiguratorBackend/PCKonfiguratorBackend.csproj --configuration Release --no-restore

      - name: Run Tests
        run: dotnet test PCKonfiguratorBackend.Tests/PCKonfiguratorBackend.Tests.csproj --no-restore --verbosity normal
        continue-on-error: true

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        if: success()

      - name: Build and Push Docker Images
        run: |
          docker-compose build
          docker tag pckonfiguratorbackend ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest

      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            echo "🚀 Starte Deployment..."

            # Verzeichnis für die Anwendung setzen
            APP_DIR="/opt/pckonfigurator"

            # Falls Verzeichnis nicht existiert -> erstellen und Repository clonen
            if [ ! -d "$APP_DIR" ]; then
              echo "📁 Erstelle Verzeichnis und clone Repository..."
              mkdir -p $APP_DIR
              git clone https://github.com/FourByteAGS/PC-Konfigurator_Backend $APP_DIR
            else
              echo "✅ Repository existiert bereits, aktualisiere Code..."
              cd $APP_DIR
              git reset --hard HEAD
              git pull origin main
            fi

            # Stelle sicher, dass Docker Compose im Verzeichnis läuft
            cd $APP_DIR

            echo "📦 Pulling latest images..."
            docker-compose pull

            echo "🛑 Stoppe vorherige Container..."
            docker-compose down

            echo "🚀 Starte neue Container..."
            docker-compose up -d

            echo "✅ Deployment abgeschlossen!"
