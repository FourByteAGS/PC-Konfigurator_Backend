name: Docker Build, Test & Deploy Pipeline

on:
  push:
    branches:
      - main  # Starte Workflow, wenn auf 'main' gepusht wird
  pull_request:
    branches:
      - main

jobs:
  start-database:
    runs-on: ubuntu-latest
    steps:
      - name: Start MSSQL Database on Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # Pr√ºfen, ob MSSQL bereits l√§uft
            if [ ! "$(docker ps -q -f name=mssql)" ]; then
              if [ "$(docker ps -aq -f status=exited -f name=mssql)" ]; then
                echo "üîÑ MSSQL existiert, aber ist gestoppt. Starte neu..."
                docker start mssql
              else
                echo "üöÄ MSSQL l√§uft nicht, erstelle neuen MSSQL-Container auf localhost:1433..."
                docker run -d --name mssql \
                  -e "SA_PASSWORD=YourStrong!Passw0rd" \
                  -e "ACCEPT_EULA=Y" \
                  -p 1433:1433 \
                  --restart always \
                  mcr.microsoft.com/mssql/server:2022-latest
              fi
            else
              echo "‚úÖ MSSQL l√§uft bereits auf localhost:1433!"
            fi
            
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: start-database

    steps:
      # üì• 1. Repository auschecken
      - name: Checkout Repository
        uses: actions/checkout@v4

      # üîß 2. .NET SDK installieren
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      # üì¶ 3. Abh√§ngigkeiten wiederherstellen
      - name: Restore dependencies
        run: dotnet restore PCKonfiguratorBackend/PCKonfiguratorBackend.csproj

      # üî® 4. Das Backend bauen
      - name: Build Backend
        run: dotnet build PCKonfiguratorBackend/PCKonfiguratorBackend.csproj --configuration Release --no-restore

      # ‚úÖ 5. Tests ausf√ºhren (falls Tests vorhanden sind)
      - name: Run Tests
        run: dotnet test PCKonfiguratorBackend.Tests/PCKonfiguratorBackend.Tests.csproj --no-restore --verbosity normal
        continue-on-error: true  # üîπ Falls du Tests hast, aber sie nicht blockieren sollen

      # üê≥ 6. Docker-Login (falls Image gepusht werden soll)
      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        if: success()

      # üî® 7. Docker-Image bauen
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest -f PCKonfiguratorBackend/Dockerfile .
          docker tag ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:${{ github.run_number }}

      # üöÄ 8. Docker-Image pushen (optional)
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:${{ github.run_number }}
        if: success()

      # üì° 9. Deployment auf den Server per SSH
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest
            docker stop pckonfigurator-backend || true
            docker rm pckonfigurator-backend || true
            docker run -d -p 110:8080 --name pckonfigurator-backend ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest
