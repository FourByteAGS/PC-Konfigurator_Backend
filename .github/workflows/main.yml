name: Docker Build, Test & Deploy Pipeline

on:
  push:
    branches:
      - main  # Starte Workflow, wenn auf 'main' gepusht wird
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 📥 1. Repository auschecken
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 🔧 2. .NET SDK installieren
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      # 📦 3. Abhängigkeiten wiederherstellen
      - name: Restore dependencies
        run: dotnet restore PCKonfiguratorBackend/PCKonfiguratorBackend.csproj

      # 🔨 4. Das Backend bauen
      - name: Build Backend
        run: dotnet build PCKonfiguratorBackend/PCKonfiguratorBackend.csproj --configuration Release --no-restore

      # ✅ 5. Tests ausführen (falls Tests vorhanden sind)
      - name: Run Tests
        run: dotnet test PCKonfiguratorBackend.Tests/PCKonfiguratorBackend.Tests.csproj --no-restore --verbosity normal
        continue-on-error: true  # 🔹 Falls du Tests hast, aber sie nicht blockieren sollen

      # 🐳 6. Docker-Login (falls Image gepusht werden soll)
      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        if: success()

      # 🔨 7. Docker-Image bauen
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest -f PCKonfiguratorBackend/Dockerfile .
          docker tag ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:${{ github.run_number }}

      # 🚀 8. Docker-Image pushen (optional)
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:${{ github.run_number }}
        if: success()

      # 📡 9. Deployment auf den Server per SSH
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest
            docker stop pckonfigurator-backend || true
            docker rm pckonfigurator-backend || true
            docker run -d -p 80:8080 --name pckonfigurator-backend ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest
