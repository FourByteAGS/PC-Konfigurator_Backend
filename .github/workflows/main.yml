name: Docker Build, Test & Deploy Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 📥 1. Repository auschecken
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 🔧 2. .NET SDK installieren
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      # 📦 3. Abhängigkeiten wiederherstellen
      - name: Restore dependencies
        run: dotnet restore PCKonfiguratorBackend/PCKonfiguratorBackend.csproj

      # 🔨 4. Das Backend bauen
      - name: Build Backend
        run: dotnet build PCKonfiguratorBackend/PCKonfiguratorBackend.csproj --configuration Release --no-restore

      # ✅ 5. Tests ausführen
      - name: Run Tests
        run: dotnet test PCKonfiguratorBackend.Tests/PCKonfiguratorBackend.Tests.csproj --no-restore --verbosity normal
        continue-on-error: true

      # 🐳 6. Docker-Login
      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        if: success()

      # 🔨 7. Docker-Image bauen
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest -f PCKonfiguratorBackend/Dockerfile .
          docker tag ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:${{ github.run_number }}

      # 🚀 8. Docker-Image pushen
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:${{ github.run_number }}
        if: success()

      # 📡 9. Deployment auf den Server
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # 🛑 9.1. Stelle sicher, dass das Docker-Netzwerk existiert
            docker network ls | grep mynetwork || docker network create mynetwork

            # ✅ 9.2. Prüfe, ob MSSQL bereits läuft
            if [ "$(docker ps -q -f name=mssql-server)" ]; then
              echo "✅ MSSQL läuft bereits. Kein Neustart nötig."
            else
              echo "⚠️ MSSQL ist nicht aktiv. Starte den Container..."
              docker start mssql-server || docker run -d \
                --name mssql-server \
                -e 'ACCEPT_EULA=Y' \
                -e 'SA_PASSWORD=YourStrong!Passw0rd' \
                -p 1433:1433 \
                --network mynetwork \
                --restart always \
                mcr.microsoft.com/mssql/server:2022-latest
              sleep 15  # Warte auf vollständigen Start
            fi

            # 🛑 9.3. Stoppe und entferne altes Backend (falls vorhanden)
            docker stop pckonfigurator-backend || true
            docker rm pckonfigurator-backend || true

            # 🚀 9.4. Ziehe das aktuelle Backend-Image
            docker pull ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest

            # 🐳 9.5. Stelle sicher, dass MSSQL und Backend im selben Netzwerk sind
            docker network connect mynetwork mssql-server || true

            # 🚀 9.6. Starte das Backend mit der richtigen MSSQL-Verbindung
            docker run -d \
              -p 110:8080 \
              --name pckonfigurator-backend \
              --network mynetwork \
              -e "DB_CONNECTION_STRING=Server=mssql-server,1433;Database=YourDatabase;User Id=sa;Password=YourStrong!Passw0rd;" \
              --restart always \
              ${{ secrets.DOCKER_USERNAME }}/pckonfigurator-backend:latest
