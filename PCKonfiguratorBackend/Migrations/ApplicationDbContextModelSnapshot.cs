// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCKonfiguratorBackend;

#nullable disable

namespace PCKonfiguratorBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PCKonfiguratorBackend.Models.CPU", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cpuSpecificationid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("cpuSpecificationid");

                    b.ToTable("CPU");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.CPUFan", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cpufanSpecificationsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("dimensionsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("cpufanSpecificationsid");

                    b.HasIndex("dimensionsid");

                    b.ToTable("CPUFan");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.CPUMemory", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("maxCapacity")
                        .HasColumnType("int");

                    b.Property<float>("maxSpeed")
                        .HasColumnType("real");

                    b.Property<int>("memoryType")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("CPUMemory");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.CPUSpecification", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("baseClock")
                        .HasColumnType("float");

                    b.Property<double>("boostClock")
                        .HasColumnType("float");

                    b.Property<int>("core")
                        .HasColumnType("int");

                    b.Property<Guid>("cpuMemoryid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("l2Cache")
                        .HasColumnType("int");

                    b.Property<int>("l3Cache")
                        .HasColumnType("int");

                    b.Property<int>("maxTemp")
                        .HasColumnType("int");

                    b.Property<int>("socket")
                        .HasColumnType("int");

                    b.Property<int>("threads")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("cpuMemoryid");

                    b.ToTable("CPUSpecification");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.CpuFanSpecifications", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("connector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("heatpipes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("socket")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("CpuFanSpecifications");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.Dimensions", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("depth")
                        .HasColumnType("real");

                    b.Property<float>("height")
                        .HasColumnType("real");

                    b.Property<float>("width")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("Dimensions");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.Fan", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("dimensionsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fanSpecificationsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("dimensionsid");

                    b.HasIndex("fanSpecificationsid");

                    b.ToTable("Fan");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.FanSpecifications", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("besonderheit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("noiseLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("power")
                        .HasColumnType("int");

                    b.Property<int>("rpm")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("FanSpecifications");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.GPU", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("dimensionsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("gpuSpecificationsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("dimensionsid");

                    b.HasIndex("gpuSpecificationsid");

                    b.ToTable("GPU");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.GPUSpecifications", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("boostclock")
                        .HasColumnType("int");

                    b.Property<int>("coreclock")
                        .HasColumnType("int");

                    b.Property<int>("memory")
                        .HasColumnType("int");

                    b.Property<int>("power")
                        .HasColumnType("int");

                    b.Property<float>("speed")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("GPUSpecifications");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.Mainboard", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("dimensionsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("mainboardSpecificationsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("dimensionsid");

                    b.HasIndex("mainboardSpecificationsid");

                    b.ToTable("Mainboard");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.MainboardSpecifications", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("chipset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("formFactor")
                        .HasColumnType("int");

                    b.Property<int>("m2Slot")
                        .HasColumnType("int");

                    b.Property<int>("memoryType")
                        .HasColumnType("int");

                    b.Property<int>("sataPorts")
                        .HasColumnType("int");

                    b.Property<int>("socket")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("MainboardSpecifications");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.PSU", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("dimensionsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<Guid>("psuSpecificationid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("dimensionsid");

                    b.HasIndex("psuSpecificationid");

                    b.ToTable("PSU");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.PSUSpecification", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("certifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("connectors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("noiseLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("power")
                        .HasColumnType("int");

                    b.Property<int>("rpm")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("PSUSpecification");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.ProductCollection", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("selectedCPUFanid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("selectedCPUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("selectedFanid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("selectedGPUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("selectedMainboardid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("selectedPSUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("selectedRAMid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("selectedStorageid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("selectedTowerid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("token")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("selectedCPUFanid");

                    b.HasIndex("selectedCPUid");

                    b.HasIndex("selectedFanid");

                    b.HasIndex("selectedGPUid");

                    b.HasIndex("selectedMainboardid");

                    b.HasIndex("selectedPSUid");

                    b.HasIndex("selectedRAMid");

                    b.HasIndex("selectedStorageid");

                    b.HasIndex("selectedTowerid");

                    b.ToTable("ProductCollection");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.RAM", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<Guid>("ramSpecificationsid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("ramSpecificationsid");

                    b.ToTable("RAM");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.RAMSpecifications", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MemoryType")
                        .HasColumnType("int");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<int>("speed")
                        .HasColumnType("int");

                    b.Property<float>("voltage")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("RAMSpecifications");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.Storage", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<Guid>("storageSpecificationsid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("storageSpecificationsid");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.StorageSpecifications", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<int>("readSpeeed")
                        .HasColumnType("int");

                    b.Property<string>("schnittstelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("writeSpeeed")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("StorageSpecifications");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.Tower", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("dimensionsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<Guid>("towerCompatibilityid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("towerType")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("dimensionsid");

                    b.HasIndex("towerCompatibilityid");

                    b.ToTable("Tower");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.TowerCompatibility", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("maxCpuCoolerHeight")
                        .HasColumnType("real");

                    b.Property<float>("maxGpuLenght")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("TowerCompatibility");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.CPU", b =>
                {
                    b.HasOne("PCKonfiguratorBackend.Models.CPUSpecification", "cpuSpecification")
                        .WithMany()
                        .HasForeignKey("cpuSpecificationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cpuSpecification");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.CPUFan", b =>
                {
                    b.HasOne("PCKonfiguratorBackend.Models.CpuFanSpecifications", "cpufanSpecifications")
                        .WithMany()
                        .HasForeignKey("cpufanSpecificationsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCKonfiguratorBackend.Models.Dimensions", "dimensions")
                        .WithMany()
                        .HasForeignKey("dimensionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cpufanSpecifications");

                    b.Navigation("dimensions");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.CPUSpecification", b =>
                {
                    b.HasOne("PCKonfiguratorBackend.Models.CPUMemory", "cpuMemory")
                        .WithMany()
                        .HasForeignKey("cpuMemoryid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cpuMemory");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.Fan", b =>
                {
                    b.HasOne("PCKonfiguratorBackend.Models.Dimensions", "dimensions")
                        .WithMany()
                        .HasForeignKey("dimensionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCKonfiguratorBackend.Models.FanSpecifications", "fanSpecifications")
                        .WithMany()
                        .HasForeignKey("fanSpecificationsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dimensions");

                    b.Navigation("fanSpecifications");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.GPU", b =>
                {
                    b.HasOne("PCKonfiguratorBackend.Models.Dimensions", "dimensions")
                        .WithMany()
                        .HasForeignKey("dimensionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCKonfiguratorBackend.Models.GPUSpecifications", "gpuSpecifications")
                        .WithMany()
                        .HasForeignKey("gpuSpecificationsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dimensions");

                    b.Navigation("gpuSpecifications");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.Mainboard", b =>
                {
                    b.HasOne("PCKonfiguratorBackend.Models.Dimensions", "dimensions")
                        .WithMany()
                        .HasForeignKey("dimensionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCKonfiguratorBackend.Models.MainboardSpecifications", "mainboardSpecifications")
                        .WithMany()
                        .HasForeignKey("mainboardSpecificationsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dimensions");

                    b.Navigation("mainboardSpecifications");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.PSU", b =>
                {
                    b.HasOne("PCKonfiguratorBackend.Models.Dimensions", "dimensions")
                        .WithMany()
                        .HasForeignKey("dimensionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCKonfiguratorBackend.Models.PSUSpecification", "psuSpecification")
                        .WithMany()
                        .HasForeignKey("psuSpecificationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dimensions");

                    b.Navigation("psuSpecification");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.ProductCollection", b =>
                {
                    b.HasOne("PCKonfiguratorBackend.Models.CPUFan", "selectedCPUFan")
                        .WithMany()
                        .HasForeignKey("selectedCPUFanid");

                    b.HasOne("PCKonfiguratorBackend.Models.CPU", "selectedCPU")
                        .WithMany()
                        .HasForeignKey("selectedCPUid");

                    b.HasOne("PCKonfiguratorBackend.Models.Fan", "selectedFan")
                        .WithMany()
                        .HasForeignKey("selectedFanid");

                    b.HasOne("PCKonfiguratorBackend.Models.GPU", "selectedGPU")
                        .WithMany()
                        .HasForeignKey("selectedGPUid");

                    b.HasOne("PCKonfiguratorBackend.Models.Mainboard", "selectedMainboard")
                        .WithMany()
                        .HasForeignKey("selectedMainboardid");

                    b.HasOne("PCKonfiguratorBackend.Models.PSU", "selectedPSU")
                        .WithMany()
                        .HasForeignKey("selectedPSUid");

                    b.HasOne("PCKonfiguratorBackend.Models.RAM", "selectedRAM")
                        .WithMany()
                        .HasForeignKey("selectedRAMid");

                    b.HasOne("PCKonfiguratorBackend.Models.Storage", "selectedStorage")
                        .WithMany()
                        .HasForeignKey("selectedStorageid");

                    b.HasOne("PCKonfiguratorBackend.Models.Tower", "selectedTower")
                        .WithMany()
                        .HasForeignKey("selectedTowerid");

                    b.Navigation("selectedCPU");

                    b.Navigation("selectedCPUFan");

                    b.Navigation("selectedFan");

                    b.Navigation("selectedGPU");

                    b.Navigation("selectedMainboard");

                    b.Navigation("selectedPSU");

                    b.Navigation("selectedRAM");

                    b.Navigation("selectedStorage");

                    b.Navigation("selectedTower");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.RAM", b =>
                {
                    b.HasOne("PCKonfiguratorBackend.Models.RAMSpecifications", "ramSpecifications")
                        .WithMany()
                        .HasForeignKey("ramSpecificationsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ramSpecifications");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.Storage", b =>
                {
                    b.HasOne("PCKonfiguratorBackend.Models.StorageSpecifications", "storageSpecifications")
                        .WithMany()
                        .HasForeignKey("storageSpecificationsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("storageSpecifications");
                });

            modelBuilder.Entity("PCKonfiguratorBackend.Models.Tower", b =>
                {
                    b.HasOne("PCKonfiguratorBackend.Models.Dimensions", "dimensions")
                        .WithMany()
                        .HasForeignKey("dimensionsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCKonfiguratorBackend.Models.TowerCompatibility", "towerCompatibility")
                        .WithMany()
                        .HasForeignKey("towerCompatibilityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dimensions");

                    b.Navigation("towerCompatibility");
                });
#pragma warning restore 612, 618
        }
    }
}
